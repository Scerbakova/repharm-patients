{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistrationFormComponent = class RegistrationFormComponent {\n  buidForm() {\n    this.registerPatientForm = this.fb.group({\n      'first name': ['', Validators.required],\n      'last name': ['', Validators.required],\n      'personal id': ['', Validators.required],\n      'date of birth': ['', Validators.required],\n      'phone number': ['', Validators.required],\n      email: ['', Validators.required],\n      'medical conditions': [''],\n      'surgical history': [''],\n      medications: [''],\n      allergies: [''],\n      immunizations: [''],\n      \"doctor's name\": ['', Validators.required],\n      \"doctor's surname\": ['', Validators.required],\n      insurance: [false]\n    });\n  }\n  populateForm() {\n    if (this.patient) {\n      this.registerOrEdit = 'Edit';\n      this.registerPatientForm.patchValue({\n        // Populate form fields with patient data\n        'first name': this.patient.firstName,\n        'last name': this.patient.lastName,\n        'personal id': this.patient.personalId,\n        'date of birth': this.patient.dateOfBirth,\n        'phone number': this.patient.phoneNumber,\n        email: this.patient.email,\n        'medical conditions': this.patient.medicalConditions,\n        'surgical history': this.patient.surgicalHistory,\n        medications: this.patient.medications,\n        allergies: this.patient.allergies,\n        immunizations: this.patient.immunizations,\n        \"doctor's name\": this.patient.doctorsName,\n        \"doctor's surname\": this.patient.doctorsSurname,\n        insurance: this.patient.insurance\n      });\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes.isModalOpen && this.isModalOpen) {\n      this.buidForm();\n      this.populateForm();\n    }\n  }\n  ngOnInit() {\n    this.buidForm();\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.registerPatientForm.reset();\n  }\n  constructor(patientsService, fb) {\n    this.patientsService = patientsService;\n    this.fb = fb;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.registerPatientForm = this.fb.group({});\n    this.registerOrEdit = 'Register';\n    this.patientFields = ['first name', 'last name', 'personal id', 'phone number', 'email', 'medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations', `doctor's name`, `doctor's surname`];\n  }\n  registerPatient() {\n    if (this.registerOrEdit === 'Register') {\n      const patient = {\n        firstName: this.registerPatientForm.get('first name')?.value,\n        lastName: this.registerPatientForm.get('last name')?.value,\n        personalId: this.registerPatientForm.get('personal id')?.value,\n        dateOfBirth: this.registerPatientForm.get('date of birth')?.value,\n        phoneNumber: this.registerPatientForm.get('phone number')?.value,\n        email: this.registerPatientForm.get('email')?.value,\n        medicalConditions: this.registerPatientForm.get('medical conditions')?.value,\n        surgicalHistory: this.registerPatientForm.get('surgical history')?.value,\n        medications: this.registerPatientForm.get('medications')?.value,\n        allergies: this.registerPatientForm.get('allergies')?.value,\n        immunizations: this.registerPatientForm.get('immunizations')?.value,\n        doctorsName: this.registerPatientForm.get(`doctor's name`)?.value,\n        doctorsSurname: this.registerPatientForm.get(`doctor's surname`)?.value,\n        insurance: this.registerPatientForm.get('insurance')?.value\n      };\n      if (this.registerPatientForm.valid) {\n        this.patientsService.addNewPatient(patient).subscribe({\n          next: () => {\n            this.close();\n            this.resetForm();\n          },\n          error: error => {\n            console.error('Error registering patient:', error);\n          }\n        });\n      } else {\n        alert('Please fill in all the required fields.');\n      }\n    }\n  }\n};\n__decorate([Input()], RegistrationFormComponent.prototype, \"isModalOpen\", void 0);\n__decorate([Input()], RegistrationFormComponent.prototype, \"patient\", void 0);\n__decorate([Output()], RegistrationFormComponent.prototype, \"isModalOpenChange\", void 0);\nRegistrationFormComponent = __decorate([Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})], RegistrationFormComponent);\nexport { RegistrationFormComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","Validators","RegistrationFormComponent","buidForm","registerPatientForm","fb","group","required","email","medications","allergies","immunizations","insurance","populateForm","patient","registerOrEdit","patchValue","firstName","lastName","personalId","dateOfBirth","phoneNumber","medicalConditions","surgicalHistory","doctorsName","doctorsSurname","ngOnChanges","changes","isModalOpen","ngOnInit","close","resetForm","isModalOpenChange","emit","preventClose","event","stopPropagation","reset","constructor","patientsService","registerPatient","get","value","valid","addNewPatient","subscribe","next","error","console","alert","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts"],"sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Patient } from 'src/app/models/patient.model';\nimport { PatientsService } from 'src/app/services/patients.service';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss'],\n})\nexport class RegistrationFormComponent implements OnInit {\n  @Input() isModalOpen: boolean = false;\n  @Input() patient?: Partial<Patient>;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  registerPatientForm: FormGroup = this.fb.group({});\n  registerOrEdit: 'Register' | 'Edit' = 'Register';\n\n  buidForm(): void {\n    this.registerPatientForm = this.fb.group({\n      'first name': ['', Validators.required],\n      'last name': ['', Validators.required],\n      'personal id': ['', Validators.required],\n      'date of birth': ['', Validators.required],\n      'phone number': ['', Validators.required],\n      email: ['', Validators.required],\n      'medical conditions': [''],\n      'surgical history': [''],\n      medications: [''],\n      allergies: [''],\n      immunizations: [''],\n      \"doctor's name\": ['', Validators.required],\n      \"doctor's surname\": ['', Validators.required],\n      insurance: [false],\n    });\n  }\n  populateForm(): void {\n    if (this.patient) {\n      this.registerOrEdit = 'Edit';\n      this.registerPatientForm.patchValue({\n        // Populate form fields with patient data\n        'first name': this.patient.firstName,\n        'last name': this.patient.lastName,\n        'personal id': this.patient.personalId,\n        'date of birth': this.patient.dateOfBirth,\n        'phone number': this.patient.phoneNumber,\n        email: this.patient.email,\n        'medical conditions': this.patient.medicalConditions,\n        'surgical history': this.patient.surgicalHistory,\n        medications: this.patient.medications,\n        allergies: this.patient.allergies,\n        immunizations: this.patient.immunizations,\n        \"doctor's name\": this.patient.doctorsName,\n        \"doctor's surname\": this.patient.doctorsSurname,\n        insurance: this.patient.insurance,\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.isModalOpen && this.isModalOpen) {\n      this.buidForm();\n      this.populateForm();\n    }\n  }\n\n  ngOnInit(): void {\n    this.buidForm();\n  }\n\n  patientFields: string[] = [\n    'first name',\n    'last name',\n    'personal id',\n    'phone number',\n    'email',\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n    `doctor's name`,\n    `doctor's surname`,\n  ];\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.registerPatientForm.reset();\n  }\n\n  constructor(\n    private patientsService: PatientsService,\n    private fb: FormBuilder\n  ) {}\n\n  registerPatient() {\n    if (this.registerOrEdit === 'Register') {\n      const patient: Partial<Patient> = {\n        firstName: this.registerPatientForm.get('first name')?.value,\n        lastName: this.registerPatientForm.get('last name')?.value,\n        personalId: this.registerPatientForm.get('personal id')?.value,\n        dateOfBirth: this.registerPatientForm.get('date of birth')?.value,\n        phoneNumber: this.registerPatientForm.get('phone number')?.value,\n        email: this.registerPatientForm.get('email')?.value,\n        medicalConditions:\n          this.registerPatientForm.get('medical conditions')?.value,\n        surgicalHistory:\n          this.registerPatientForm.get('surgical history')?.value,\n        medications: this.registerPatientForm.get('medications')?.value,\n        allergies: this.registerPatientForm.get('allergies')?.value,\n        immunizations: this.registerPatientForm.get('immunizations')?.value,\n        doctorsName: this.registerPatientForm.get(`doctor's name`)?.value,\n        doctorsSurname: this.registerPatientForm.get(`doctor's surname`)?.value,\n        insurance: this.registerPatientForm.get('insurance')?.value,\n      };\n      if (this.registerPatientForm.valid) {\n        this.patientsService.addNewPatient(patient).subscribe({\n          next: () => {\n            this.close();\n            this.resetForm();\n          },\n          error: (error) => {\n            console.error('Error registering patient:', error);\n          },\n        });\n      } else {\n        alert('Please fill in all the required fields.');\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}