{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/patients.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction RegistrationFormComponent_div_0_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"input\", 6);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_ng_container_3_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const field_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.newPatient[field_r1] = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const field_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", field_r1)(\"name\", field_r1)(\"ngModel\", ctx_r2.newPatient[field_r1])(\"required\", !ctx_r2.canBeEmptyFields.includes(field_r1));\n  }\n}\nfunction RegistrationFormComponent_div_0_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 7);\n    i0.ɵɵtext(1, \"Insurance\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"input\", 8);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_ng_template_4_Template_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.newPatient[\"insurance\"] = $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r4.newPatient[\"insurance\"]);\n  }\n}\nfunction RegistrationFormComponent_div_0_small_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 9);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"label\", 2);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, RegistrationFormComponent_div_0_ng_container_3_Template, 2, 4, \"ng-container\", 3);\n    i0.ɵɵtemplate(4, RegistrationFormComponent_div_0_ng_template_4_Template, 3, 1, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(6, RegistrationFormComponent_div_0_small_6_Template, 2, 0, \"small\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r1 = ctx.$implicit;\n    const _r3 = i0.ɵɵreference(5);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"for\", field_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(field_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", field_r1 !== \"insurance\")(\"ngIfElse\", _r3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", field_r1 !== \"insurance\" && ctx_r0.patientForm.controls[field_r1].invalid && ctx_r0.patientForm.controls[field_r1].touched);\n  }\n}\nexport class RegistrationFormComponent {\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n  }\n  constructor(patientsService, formBuilder) {\n    this.patientsService = patientsService;\n    this.formBuilder = formBuilder;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n    this.patientFields = ['first name', 'last name', 'personal id', 'date of birth', 'phone number', 'email', 'medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations', `doctor's name`, `doctor's surname`, 'insurance'];\n    this.canBeEmptyFields = ['medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations'];\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      this.patientsService.addNewPatient(this.newPatient).subscribe({\n        next: response => {\n          console.log('Patient registered successfully:', response);\n          this.close();\n        },\n        error: error => {\n          console.error('Error registering patient:', error);\n        }\n      });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\nRegistrationFormComponent.ɵfac = function RegistrationFormComponent_Factory(t) {\n  return new (t || RegistrationFormComponent)(i0.ɵɵdirectiveInject(i1.PatientsService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nRegistrationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationFormComponent,\n  selectors: [[\"app-registration-form\"]],\n  inputs: {\n    isModalOpen: \"isModalOpen\"\n  },\n  outputs: {\n    isModalOpenChange: \"isModalOpenChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"form-group\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-group\"], [3, \"for\"], [4, \"ngIf\", \"ngIfElse\"], [\"insuranceField\", \"\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"text\", 1, \"form-control\", 3, \"id\", \"name\", \"ngModel\", \"required\", \"ngModelChange\"], [\"for\", \"insurance\"], [\"type\", \"checkbox\", \"id\", \"insurance\", \"name\", \"insurance\", 3, \"ngModel\", \"ngModelChange\"], [1, \"text-danger\"]],\n  template: function RegistrationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegistrationFormComponent_div_0_Template, 7, 5, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.patientFields);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.RequiredValidator, i2.NgModel],\n  styles: [\".form__modal-overlay[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.6); \\n  z-index: 1000;\\n}\\n\\n.form__modal[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  background-color: white;\\n  z-index: 1001;\\n  padding: 20px;\\n  border-radius: 10px;\\n}\\n\\n.fields[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  flex: 1;\\n  margin-right: 10px; \\n  min-width: 240px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24tZm9ybS9yZWdpc3RyYXRpb24tZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esb0NBQUEsRUFBQSxtQ0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLGVBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLGdDQUFBO0VBQ0EsdUJBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxhQUFBO0VBQ0EsZUFBQTtBQUVGOztBQUNBO0VBQ0UsT0FBQTtFQUNBLGtCQUFBLEVBQUEsaUNBQUE7RUFDQSxnQkFBQTtBQUVGIiwic291cmNlc0NvbnRlbnQiOlsiLmZvcm1fX21vZGFsLW92ZXJsYXkge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpOyAvKiBTZW1pLXRyYW5zcGFyZW50IGJsYWNrIG92ZXJsYXkgKi9cbiAgei1pbmRleDogMTAwMDtcbn1cblxuLmZvcm1fX21vZGFsIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIHotaW5kZXg6IDEwMDE7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG59XG4uZmllbGRze1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG59XG5cbi5mb3JtLWdyb3VwIHtcbiAgZmxleDogMTtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4OyAvKiBBZGp1c3QgdGhlIHNwYWNpbmcgYXMgbmVlZGVkICovXG4gIG1pbi13aWR0aDogMjQwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAuB,eAAe;AACtE,SAAiCC,UAAU,QAAQ,gBAAgB;;;;;;;;ICCjEC,6BAAiE;IAC/DA,gCAOE;IAFAA;MAAAA;MAAA;MAAA;MAAA;IAAA,EAA+B;IALjCA,iBAOE;IACJA,0BAAe;;;;;IANXA,eAAY;IAAZA,6BAAY;;;;;;IAQdA,gCAAuB;IAAAA,yBAAS;IAAAA,iBAAQ;IACxCA,gCAKE;IADAA;MAAAA;MAAA;MAAA,yCAAwB,WAAW;IAAA,EAAE;IAJvCA,iBAKE;;;;IADAA,eAAqC;IAArCA,wDAAqC;;;;;IAGzCA,gCAOC;IACCA,yCACF;IAAAA,iBAAQ;;;;;IA9BVA,8BAA4D;IACjCA,YAAW;IAAAA,iBAAQ;IAC5CA,kGASe;IACfA,iIAQc;IACdA,oFASQ;IACVA,iBAAM;;;;;;IA9BGA,eAAiB;IAAjBA,yCAAiB;IAACA,eAAW;IAAXA,8BAAW;IACrBA,eAA6B;IAA7BA,+CAA6B;IAoBzCA,eAKL;IALKA,iJAKL;;;ADjBA,OAAM,MAAOC,yBAAyB;EA+CpCC,SAAS;IACP,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;EACnC;EAEAC,KAAK;IACH,IAAI,CAACH,SAAS,EAAE;IAChB,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,KAAK,CAAC;EACpC;EAEAE,YAAY,CAACC,KAAY;IACvBA,KAAK,CAACC,eAAe,EAAE;EACzB;EAEQN,SAAS;IACf,IAAI,CAACO,UAAU,GAAG;MAChBC,EAAE,EAAE,EAAE;MACNC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE;MACTC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE,EAAE;MACnBC,WAAW,EAAE,EAAE;MACfC,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MACfC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE;KACZ;EACH;EAEAC,YACUC,eAAgC,EAChCC,WAAwB;IADxB,oBAAe,GAAfD,eAAe;IACf,gBAAW,GAAXC,WAAW;IAlFZ,gBAAW,GAAY,KAAK;IAC3B,sBAAiB,GAAG,IAAI9B,YAAY,EAAW;IAEzD,eAAU,GAAkB;MAC1Ba,EAAE,EAAE,EAAE;MACNC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE;MACTC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE,EAAE;MACnBC,WAAW,EAAE,EAAE;MACfC,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MACfC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE;KACZ;IAED,kBAAa,GAAa,CACxB,YAAY,EACZ,WAAW,EACX,aAAa,EACb,eAAe,EACf,cAAc,EACd,OAAO,EACP,oBAAoB,EACpB,kBAAkB,EAClB,aAAa,EACb,WAAW,EACX,eAAe,EACf,eAAe,EACf,kBAAkB,EAClB,WAAW,CACZ;IAED,qBAAgB,GAAa,CAC3B,oBAAoB,EACpB,kBAAkB,EAClB,aAAa,EACb,WAAW,EACX,eAAe,CAChB;IAwCC;IACA,IAAI,CAACI,WAAW,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACxC;MACAlB,SAAS,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACgC,QAAQ,CAAC;MACpClB,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACgC,QAAQ;MAClC;KACD,CAAC;EACJ;;EAEAC,eAAe;IACb,IAAI,IAAI,CAACH,WAAW,CAACI,KAAK,EAAE;MAC1B;MACA,IAAI,CAACN,eAAe,CACjBO,aAAa,CAAC,IAAI,CAACxB,UAAgC,CAAC,CACpDyB,SAAS,CAAC;QACTC,IAAI,EAAGC,QAAQ,IAAI;UACjBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;UACzD,IAAI,CAAC/B,KAAK,EAAE;QACd,CAAC;QACDkC,KAAK,EAAGA,KAAK,IAAI;UACfF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QACpD;OACD,CAAC;KACL,MAAM;MACL;MACAC,KAAK,CAAC,yCAAyC,CAAC;;EAEpD;;AAhHWxC,yBAAyB;mBAAzBA,yBAAyB;AAAA;AAAzBA,yBAAyB;QAAzBA,yBAAyB;EAAAyC;EAAAC;IAAAC;EAAA;EAAAC;IAAAzC;EAAA;EAAA0C;EAAAC;EAAAC;EAAAC;IAAA;MCVtCjD,0EA+BM;;;MA/BiBA,2CAAgB","names":["EventEmitter","Validators","i0","RegistrationFormComponent","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","newPatient","id","firstName","lastName","personalId","dateOfBirth","phoneNumber","email","medicalConditions","surgicalHistory","medications","allergies","immunizations","doctorsName","doctorsSurname","insurance","constructor","patientsService","formBuilder","patientForm","group","required","registerPatient","valid","addNewPatient","subscribe","next","response","console","log","error","alert","selectors","inputs","isModalOpen","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts","C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DynamicFields, Patient } from 'src/app/models/patient.model';\nimport { PatientsService } from 'src/app/services/patients.service';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss'],\n})\nexport class RegistrationFormComponent {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  newPatient: DynamicFields = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    personalId: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    email: '',\n    medicalConditions: [],\n    surgicalHistory: [],\n    medications: [],\n    allergies: [],\n    immunizations: [],\n    doctorsName: '',\n    doctorsSurname: '',\n    insurance: null,\n  };\n\n  patientFields: string[] = [\n    'first name',\n    'last name',\n    'personal id',\n    'date of birth',\n    'phone number',\n    'email',\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n    `doctor's name`,\n    `doctor's surname`,\n    'insurance',\n  ];\n\n  canBeEmptyFields: string[] = [\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n  ];\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null,\n    };\n  }\n  patientForm: FormGroup;\n  constructor(\n    private patientsService: PatientsService,\n    private formBuilder: FormBuilder\n  ) {\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      this.patientsService\n        .addNewPatient(this.newPatient as unknown as Patient)\n        .subscribe({\n          next: (response) => {\n            console.log('Patient registered successfully:', response);\n            this.close();\n          },\n          error: (error) => {\n            console.error('Error registering patient:', error);\n          },\n        });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\n","<div *ngFor=\"let field of patientFields\" class=\"form-group\">\n  <label for=\"{{ field }}\">{{ field }}</label>\n  <ng-container *ngIf=\"field !== 'insurance'; else insuranceField\">\n    <input\n      type=\"text\"\n      [id]=\"field\"\n      [name]=\"field\"\n      class=\"form-control\"\n      [(ngModel)]=\"newPatient[field]\"\n      [required]=\"!canBeEmptyFields.includes(field)\"\n    />\n  </ng-container>\n  <ng-template #insuranceField>\n    <label for=\"insurance\">Insurance</label>\n    <input\n      type=\"checkbox\"\n      id=\"insurance\"\n      name=\"insurance\"\n      [(ngModel)]=\"newPatient['insurance']\"\n    />\n  </ng-template>\n  <small\n    *ngIf=\"\n      field !== 'insurance' &&\n      patientForm.controls[field].invalid &&\n      patientForm.controls[field].touched\n    \"\n    class=\"text-danger\"\n  >\n    This field is required.\n  </small>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}