{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistrationFormComponent = class RegistrationFormComponent {\n  constructor(patientsService, formBuilder) {\n    this.patientsService = patientsService;\n    this.formBuilder = formBuilder;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: false\n    };\n    this.patientFields = ['firstName', 'lastName', 'personalId', 'dateOfBirth', 'phoneNumber', 'email', 'medicalConditions', 'surgicalHistory', 'medications', 'allergies', 'immunizations', 'doctorsName', 'doctorsSurname', 'insurance'];\n    this.canBeEmptyFields = ['medicalConditions', 'surgicalHistory', 'medications', 'allergies', 'immunizations'];\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      personalId: [''],\n      dateOfBirth: [''],\n      phoneNumber: [''],\n      email: [''],\n      medicalConditions: [[]],\n      surgicalHistory: [[]],\n      medications: [[]],\n      allergies: [[]],\n      immunizations: [[]],\n      doctorsName: [''],\n      doctorsSurname: [''],\n      insurance: [false]\n    });\n  }\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  getFieldValue(field) {\n    // Implement your transformation logic here\n    return this.newPatient[field];\n  }\n  setFieldValue(field, value) {\n    // Implement your transformation logic here\n    // Set the transformed value to newPatient[field]\n    this.newPatient[field] = value;\n  }\n  resetForm() {\n    this.patientForm.reset();\n  }\n  registerPatient() {\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      const formData = this.patientForm.value;\n      const patient = {\n        id: '',\n        ...formData\n      };\n      this.patientsService.addNewPatient(patient).subscribe({\n        next: response => {\n          console.log('Patient registered successfully:', response);\n          this.close();\n        },\n        error: error => {\n          console.error('Error registering patient:', error);\n        }\n      });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n};\n__decorate([Input()], RegistrationFormComponent.prototype, \"isModalOpen\", void 0);\n__decorate([Output()], RegistrationFormComponent.prototype, \"isModalOpenChange\", void 0);\nRegistrationFormComponent = __decorate([Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})], RegistrationFormComponent);\nexport { RegistrationFormComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AACtE,SAAiCC,UAAU,QAAQ,gBAAgB;AAS5D,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAiDpCC,YACUC,eAAgC,EAChCC,WAAwB;IADxB,oBAAe,GAAfD,eAAe;IACf,gBAAW,GAAXC,WAAW;IAlDZ,gBAAW,GAAY,KAAK;IAC3B,sBAAiB,GAAG,IAAIP,YAAY,EAAW;IAElD,eAAU,GAAgC;MAC/CQ,EAAE,EAAE,EAAE;MACNC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE;MACTC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE,EAAE;MACnBC,WAAW,EAAE,EAAE;MACfC,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MACfC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE;KACZ;IAID,kBAAa,GAAa,CACxB,WAAW,EACX,UAAU,EACV,YAAY,EACZ,aAAa,EACb,aAAa,EACb,OAAO,EACP,mBAAmB,EACnB,iBAAiB,EACjB,aAAa,EACb,WAAW,EACX,eAAe,EACf,aAAa,EACb,gBAAgB,EAChB,WAAW,CACZ;IAED,qBAAgB,GAAa,CAC3B,mBAAmB,EACnB,iBAAiB,EACjB,aAAa,EACb,WAAW,EACX,eAAe,CAChB;IAMC;IACA,IAAI,CAACC,WAAW,GAAG,IAAI,CAAChB,WAAW,CAACiB,KAAK,CAAC;MACxC;MACAf,SAAS,EAAE,CAAC,EAAE,EAAEN,UAAU,CAACsB,QAAQ,CAAC;MACpCf,QAAQ,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACsB,QAAQ,CAAC;MACnCd,UAAU,EAAE,CAAC,EAAE,CAAC;MAChBC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,KAAK,EAAE,CAAC,EAAE,CAAC;MACXC,iBAAiB,EAAE,CAAC,EAAE,CAAC;MACvBC,eAAe,EAAE,CAAC,EAAE,CAAC;MACrBC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,SAAS,EAAE,CAAC,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC,EAAE,CAAC;MACnBC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,cAAc,EAAE,CAAC,EAAE,CAAC;MACpBC,SAAS,EAAE,CAAC,KAAK;KAClB,CAAC;EACJ;EAEAI,SAAS;IACP,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;EACnC;EAEAC,KAAK;IACH,IAAI,CAACH,SAAS,EAAE;IAChB,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,KAAK,CAAC;EACpC;EAEAE,YAAY,CAACC,KAAY;IACvBA,KAAK,CAACC,eAAe,EAAE;EACzB;EAEAC,aAAa,CAACC,KAAa;IACzB;IACA,OAAO,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC;EAC/B;EAEAE,aAAa,CAACF,KAAa,EAAEG,KAAU;IACrC;IACA;IACA,IAAI,CAACF,UAAU,CAACD,KAAK,CAAC,GAAGG,KAAK;EAChC;EAEQX,SAAS;IACf,IAAI,CAACJ,WAAW,CAACgB,KAAK,EAAE;EAC1B;EAEAC,eAAe;IACb,IAAI,IAAI,CAACjB,WAAW,CAACkB,KAAK,EAAE;MAC1B;MACA,MAAMC,QAAQ,GAAG,IAAI,CAACnB,WAAW,CAACe,KAAK;MACvC,MAAMK,OAAO,GAAY;QACvBnC,EAAE,EAAE,EAAE;QACN,GAAGkC;OACJ;MAED,IAAI,CAACpC,eAAe,CAACsC,aAAa,CAACD,OAAO,CAAC,CAACE,SAAS,CAAC;QACpDC,IAAI,EAAGC,QAAQ,IAAI;UACjBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;UACzD,IAAI,CAACjB,KAAK,EAAE;QACd,CAAC;QACDoB,KAAK,EAAGA,KAAK,IAAI;UACfF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QACpD;OACD,CAAC;KACH,MAAM;MACL;MACAC,KAAK,CAAC,yCAAyC,CAAC;;EAEpD;CACD;AA5HUC,YAARnD,KAAK,EAAE,8DAA8B;AAC5BmD,YAATlD,MAAM,EAAE,oEAAiD;AAF/CE,yBAAyB,eALrCL,SAAS,CAAC;EACTsD,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACWnD,yBAAyB,CA6HrC;SA7HYA,yBAAyB","names":["Component","EventEmitter","Input","Output","Validators","RegistrationFormComponent","constructor","patientsService","formBuilder","id","firstName","lastName","personalId","dateOfBirth","phoneNumber","email","medicalConditions","surgicalHistory","medications","allergies","immunizations","doctorsName","doctorsSurname","insurance","patientForm","group","required","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","getFieldValue","field","newPatient","setFieldValue","value","reset","registerPatient","valid","formData","patient","addNewPatient","subscribe","next","response","console","log","error","alert","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PatientsService } from 'src/app/services/patients.service';\nimport { Patient } from 'src/app/models/patient.model';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss'],\n})\nexport class RegistrationFormComponent {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  public newPatient: Array<keyof typeof Patient> = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    personalId: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    email: '',\n    medicalConditions: [],\n    surgicalHistory: [],\n    medications: [],\n    allergies: [],\n    immunizations: [],\n    doctorsName: '',\n    doctorsSurname: '',\n    insurance: false,\n  };\n\n  patientForm: FormGroup;\n\n  patientFields: string[] = [\n    'firstName',\n    'lastName',\n    'personalId',\n    'dateOfBirth',\n    'phoneNumber',\n    'email',\n    'medicalConditions',\n    'surgicalHistory',\n    'medications',\n    'allergies',\n    'immunizations',\n    'doctorsName',\n    'doctorsSurname',\n    'insurance',\n  ];\n\n  canBeEmptyFields: string[] = [\n    'medicalConditions',\n    'surgicalHistory',\n    'medications',\n    'allergies',\n    'immunizations',\n  ];\n\n  constructor(\n    private patientsService: PatientsService,\n    private formBuilder: FormBuilder\n  ) {\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      personalId: [''],\n      dateOfBirth: [''],\n      phoneNumber: [''],\n      email: [''],\n      medicalConditions: [[]],\n      surgicalHistory: [[]],\n      medications: [[]],\n      allergies: [[]],\n      immunizations: [[]],\n      doctorsName: [''],\n      doctorsSurname: [''],\n      insurance: [false],\n    });\n  }\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  getFieldValue(field: string): any {\n    // Implement your transformation logic here\n    return this.newPatient[field];\n  }\n  \n  setFieldValue(field: string, value: any) {\n    // Implement your transformation logic here\n    // Set the transformed value to newPatient[field]\n    this.newPatient[field] = value;\n  }\n\n  private resetForm() {\n    this.patientForm.reset();\n  }\n\n  registerPatient() {\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      const formData = this.patientForm.value;\n      const patient: Patient = {\n        id: '', // You can generate or retrieve an ID here\n        ...formData,\n      };\n\n      this.patientsService.addNewPatient(patient).subscribe({\n        next: (response) => {\n          console.log('Patient registered successfully:', response);\n          this.close();\n        },\n        error: (error) => {\n          console.error('Error registering patient:', error);\n        },\n      });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}