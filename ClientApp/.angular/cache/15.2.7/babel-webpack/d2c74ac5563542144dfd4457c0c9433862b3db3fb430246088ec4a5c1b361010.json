{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/patients.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction RegistrationFormComponent_div_0_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_small_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_small_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_small_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_small_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_small_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.close());\n    });\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.preventClose($event));\n    });\n    i0.ɵɵelementStart(2, \"form\", 3, 4);\n    i0.ɵɵlistener(\"ngSubmit\", function RegistrationFormComponent_div_0_Template_form_ngSubmit_2_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.registerPatient());\n    });\n    i0.ɵɵelementStart(4, \"div\", 5)(5, \"div\", 6)(6, \"label\", 7);\n    i0.ɵɵtext(7, \"First Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"input\", 8);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.newPatient.firstName = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, RegistrationFormComponent_div_0_small_9_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 6)(11, \"label\", 10);\n    i0.ɵɵtext(12, \"Last Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_13_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.newPatient.lastName = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, RegistrationFormComponent_div_0_small_14_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 6)(16, \"label\", 12);\n    i0.ɵɵtext(17, \"Personal ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_18_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.newPatient.personalId = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(19, RegistrationFormComponent_div_0_small_19_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 6)(21, \"label\", 14);\n    i0.ɵɵtext(22, \"Date of Birth\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_23_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.newPatient.dateOfBirth = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, RegistrationFormComponent_div_0_small_24_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 6)(26, \"label\", 16);\n    i0.ɵɵtext(27, \"Phone Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"input\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_28_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.newPatient.phoneNumber = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(29, RegistrationFormComponent_div_0_small_29_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"div\", 6)(31, \"label\", 18);\n    i0.ɵɵtext(32, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"input\", 19);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_33_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.newPatient.email = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(34, RegistrationFormComponent_div_0_small_34_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"div\", 6)(36, \"label\", 20);\n    i0.ɵɵtext(37, \"Medical Conditions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(38, \"input\", 21);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_38_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.newPatient.medicalConditions = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"div\", 6)(40, \"label\", 22);\n    i0.ɵɵtext(41, \"Surgical History\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(42, \"input\", 23);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_42_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.newPatient.surgicalHistory = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"div\", 6)(44, \"label\", 24);\n    i0.ɵɵtext(45, \"Medications\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(46, \"input\", 25);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_46_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.newPatient.medications = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(47, \"div\", 6)(48, \"label\", 26);\n    i0.ɵɵtext(49, \"Allergies\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(50, \"input\", 27);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_50_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.newPatient.allergies = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(51, \"div\", 6)(52, \"label\", 28);\n    i0.ɵɵtext(53, \"Immunizations\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(54, \"input\", 29);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_54_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.newPatient.immunizations = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(55, \"div\", 6)(56, \"label\", 30);\n    i0.ɵɵtext(57, \"Doctor's Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(58, \"input\", 31);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_58_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.newPatient.doctorsName = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(59, RegistrationFormComponent_div_0_small_59_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(60, \"div\", 6)(61, \"label\", 32);\n    i0.ɵɵtext(62, \"Doctor's Surname\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(63, \"input\", 33);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_63_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.newPatient.doctorsSurname = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(64, RegistrationFormComponent_div_0_small_64_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(65, \"div\", 34)(66, \"label\", 35);\n    i0.ɵɵtext(67, \"Insurance\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(68, \"input\", 36);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_68_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.newPatient.insurance = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(69, \"div\", 37)(70, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_button_click_70_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.close());\n    });\n    i0.ɵɵtext(71, \" Close \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(72, \"button\", 39);\n    i0.ɵɵtext(73, \"Register\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const _r1 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.firstName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.firstName == null ? null : _r1.controls.firstName.invalid) && (_r1.controls.firstName == null ? null : _r1.controls.firstName.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.lastName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.lastName == null ? null : _r1.controls.lastName.invalid) && (_r1.controls.lastName == null ? null : _r1.controls.lastName.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.personalId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.personalId == null ? null : _r1.controls.personalId.invalid) && (_r1.controls.personalId == null ? null : _r1.controls.personalId.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.dateOfBirth);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.dateOfBirth == null ? null : _r1.controls.dateOfBirth.invalid) && (_r1.controls.dateOfBirth == null ? null : _r1.controls.dateOfBirth.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.phoneNumber);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.phoneNumber == null ? null : _r1.controls.phoneNumber.invalid) && (_r1.controls.phoneNumber == null ? null : _r1.controls.phoneNumber.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.email);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.email == null ? null : _r1.controls.email.invalid) && (_r1.controls.email == null ? null : _r1.controls.email.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.medicalConditions);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.surgicalHistory);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.medications);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.allergies);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.immunizations);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.doctorsName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.doctorsName == null ? null : _r1.controls.doctorsName.invalid) && (_r1.controls.doctorsName == null ? null : _r1.controls.doctorsName.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.doctorsSurname);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1.controls.doctorsSurname == null ? null : _r1.controls.doctorsSurname.invalid) && (_r1.controls.doctorsSurname == null ? null : _r1.controls.doctorsSurname.touched));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.insurance);\n  }\n}\nexport class RegistrationFormComponent {\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: false\n    };\n  }\n  constructor(patientsService, formBuilder) {\n    this.patientsService = patientsService;\n    this.formBuilder = formBuilder;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: false\n    };\n    this.patientFields = ['first name', 'last name', 'personal id', 'date of birth', 'phone number', 'email', 'medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations', `doctor's name`, `doctor's surname`];\n    this.canBeEmptyFields = ['medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations'];\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    console.log('Patient form:', this.patientForm);\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      console.log('Patient form data:', this.patientForm.value);\n      // this.patientsService.addNewPatient(this.newPatient).subscribe({\n      //   next: (response) => {\n      //     console.log('Patient registered successfully:', response);\n      //     this.close();\n      //   },\n      //   error: (error) => {\n      //     console.error('Error registering patient:', error);\n      //   },\n      // });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\nRegistrationFormComponent.ɵfac = function RegistrationFormComponent_Factory(t) {\n  return new (t || RegistrationFormComponent)(i0.ɵɵdirectiveInject(i1.PatientsService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nRegistrationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationFormComponent,\n  selectors: [[\"app-registration-form\"]],\n  inputs: {\n    isModalOpen: \"isModalOpen\"\n  },\n  outputs: {\n    isModalOpenChange: \"isModalOpenChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"form__modal-overlay\", 3, \"click\", 4, \"ngIf\"], [1, \"form__modal-overlay\", 3, \"click\"], [1, \"form__modal\", 3, \"click\"], [3, \"ngSubmit\"], [\"patientForm\", \"ngForm\"], [1, \"fields\"], [1, \"form-group\"], [\"for\", \"firstName\"], [\"type\", \"text\", \"id\", \"firstName\", \"name\", \"firstName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"lastName\"], [\"type\", \"text\", \"id\", \"lastName\", \"name\", \"lastName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"personalId\"], [\"type\", \"text\", \"id\", \"personalId\", \"name\", \"personalId\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"dateOfBirth\"], [\"type\", \"date\", \"id\", \"dateOfBirth\", \"name\", \"dateOfBirth\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"phoneNumber\"], [\"type\", \"text\", \"id\", \"phoneNumber\", \"name\", \"phoneNumber\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"medicalConditions\"], [\"type\", \"text\", \"id\", \"medicalConditions\", \"name\", \"medicalConditions\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"surgicalHistory\"], [\"type\", \"text\", \"id\", \"surgicalHistory\", \"name\", \"surgicalHistory\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"medications\"], [\"type\", \"text\", \"id\", \"medications\", \"name\", \"medications\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"allergies\"], [\"type\", \"text\", \"id\", \"allergies\", \"name\", \"allergies\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"immunizations\"], [\"type\", \"text\", \"id\", \"immunizations\", \"name\", \"immunizations\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"doctorsName\"], [\"type\", \"text\", \"id\", \"doctorsName\", \"name\", \"doctorsName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"doctorsSurname\"], [\"type\", \"text\", \"id\", \"doctorsSurname\", \"name\", \"doctorsSurname\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"form-group\", \"d-flex\", \"flex-column\"], [\"for\", \"insurance\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"insurance\", \"name\", \"insurance\", 1, \"form-check-input\", \"checkbox\", 3, \"ngModel\", \"ngModelChange\"], [1, \"d-flex\", \"gap-3\", \"mt-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"text-danger\"]],\n  template: function RegistrationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegistrationFormComponent_div_0_Template, 74, 22, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isModalOpen);\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  styles: [\".form__modal-overlay[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.6); \\n  z-index: 1000;\\n}\\n\\n.form__modal[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  background-color: white;\\n  z-index: 1001;\\n  padding: 20px;\\n  border-radius: 10px;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  flex: 1;\\n  margin-right: 10px; \\n  min-width: 240px;\\n}\\n\\n.fields[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.checkbox[_ngcontent-%COMP%] {\\n  height: 30px;\\n  width: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24tZm9ybS9yZWdpc3RyYXRpb24tZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esb0NBQUEsRUFBQSxtQ0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLGVBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLGdDQUFBO0VBQ0EsdUJBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxPQUFBO0VBQ0Esa0JBQUEsRUFBQSxpQ0FBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsZUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtX19tb2RhbC1vdmVybGF5IHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTsgLyogU2VtaS10cmFuc3BhcmVudCBibGFjayBvdmVybGF5ICovXG4gIHotaW5kZXg6IDEwMDA7XG59XG5cbi5mb3JtX19tb2RhbCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB6LWluZGV4OiAxMDAxO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xufVxuXG4uZm9ybS1ncm91cCB7XG4gIGZsZXg6IDE7XG4gIG1hcmdpbi1yaWdodDogMTBweDsgLyogQWRqdXN0IHRoZSBzcGFjaW5nIGFzIG5lZWRlZCAqL1xuICBtaW4td2lkdGg6IDI0MHB4O1xufVxuXG4uZmllbGRze1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG59XG5cbi5jaGVja2JveCB7XG4gIGhlaWdodDogMzBweDtcbiAgd2lkdGg6IDMwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","i0","RegistrationFormComponent","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","newPatient","id","firstName","lastName","personalId","dateOfBirth","phoneNumber","email","medicalConditions","surgicalHistory","medications","allergies","immunizations","doctorsName","doctorsSurname","insurance","constructor","patientsService","formBuilder","patientForm","group","required","registerPatient","console","log","valid","value","alert","selectors","inputs","isModalOpen","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts","C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Patient } from 'src/app/models/patient.model';\nimport { PatientsService } from 'src/app/services/patients.service';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss'],\n})\nexport class RegistrationFormComponent {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  \n\n  newPatient: Patient = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    personalId: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    email: '',\n    medicalConditions: [],\n    surgicalHistory: [],\n    medications: [],\n    allergies: [],\n    immunizations: [],\n    doctorsName: '',\n    doctorsSurname: '',\n    insurance: false,\n  };\n\n  patientFields: string[] = [\n    'first name',\n    'last name',\n    'personal id',\n    'date of birth',\n    'phone number',\n    'email',\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n    `doctor's name`,\n    `doctor's surname`,\n  ];\n\n  canBeEmptyFields: string[] = [\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n  ];\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: false,\n    };\n  }\n  patientForm: FormGroup;\n  constructor(\n    private patientsService: PatientsService,\n    private formBuilder: FormBuilder\n  ) {\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    console.log('Patient form:', this.patientForm)\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      console.log('Patient form data:', this.patientForm.value);\n\n\n      // this.patientsService.addNewPatient(this.newPatient).subscribe({\n      //   next: (response) => {\n      //     console.log('Patient registered successfully:', response);\n      //     this.close();\n      //   },\n      //   error: (error) => {\n      //     console.error('Error registering patient:', error);\n      //   },\n      // });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\n","<div (click)=\"close()\" class=\"form__modal-overlay\" *ngIf=\"isModalOpen\">\n  <div class=\"form__modal\" (click)=\"preventClose($event)\">\n    <form (ngSubmit)=\"registerPatient()\" #patientForm=\"ngForm\">\n      <div class=\"fields\">\n        <!--Firstname input-->\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"firstName\"\n            name=\"firstName\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.firstName\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.firstName?.invalid &&\n              patientForm.controls.firstName?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!--Lastname input-->\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"lastName\"\n            name=\"lastName\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.lastName\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.lastName?.invalid &&\n              patientForm.controls.lastName?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!--Personal id input-->\n        <div class=\"form-group\">\n          <label for=\"personalId\">Personal ID</label>\n          <input\n            type=\"text\"\n            id=\"personalId\"\n            name=\"personalId\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.personalId\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.personalId?.invalid &&\n              patientForm.controls.personalId?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!--Date of birth input-->\n        <div class=\"form-group\">\n          <label for=\"dateOfBirth\">Date of Birth</label>\n          <input\n            type=\"date\"\n            id=\"dateOfBirth\"\n            name=\"dateOfBirth\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.dateOfBirth\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.dateOfBirth?.invalid &&\n              patientForm.controls.dateOfBirth?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!--Phone number input-->\n        <div class=\"form-group\">\n          <label for=\"phoneNumber\">Phone Number</label>\n          <input\n            type=\"text\"\n            id=\"phoneNumber\"\n            name=\"phoneNumber\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.phoneNumber\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.phoneNumber?.invalid &&\n              patientForm.controls.phoneNumber?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!--Email input-->\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.email\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.email?.invalid &&\n              patientForm.controls.email?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!--Medical conditions input-->\n        <div class=\"form-group\">\n          <label for=\"medicalConditions\">Medical Conditions</label>\n          <input\n            type=\"text\"\n            id=\"medicalConditions\"\n            name=\"medicalConditions\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.medicalConditions\"\n          />\n        </div>\n        <!-- Surgical history input-->\n        <div class=\"form-group\">\n          <label for=\"surgicalHistory\">Surgical History</label>\n          <input\n            type=\"text\"\n            id=\"surgicalHistory\"\n            name=\"surgicalHistory\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.surgicalHistory\"\n          />\n        </div>\n        <!-- Medications input-->\n        <div class=\"form-group\">\n          <label for=\"medications\">Medications</label>\n          <input\n            type=\"text\"\n            id=\"medications\"\n            name=\"medications\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.medications\"\n          />\n        </div>\n        <!-- Allergies input-->\n        <div class=\"form-group\">\n          <label for=\"allergies\">Allergies</label>\n          <input\n            type=\"text\"\n            id=\"allergies\"\n            name=\"allergies\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.allergies\"\n          />\n        </div>\n        <!-- Immunizations input-->\n        <div class=\"form-group\">\n          <label for=\"immunizations\">Immunizations</label>\n          <input\n            type=\"text\"\n            id=\"immunizations\"\n            name=\"immunizations\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.immunizations\"\n          />\n        </div>\n        <!-- Doctor's name input-->\n        <div class=\"form-group\">\n          <label for=\"doctorsName\">Doctor's Name</label>\n          <input\n            type=\"text\"\n            id=\"doctorsName\"\n            name=\"doctorsName\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.doctorsName\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.doctorsName?.invalid &&\n              patientForm.controls.doctorsName?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!-- Doctor's surname input--->\n        <div class=\"form-group\">\n          <label for=\"doctorsSurname\">Doctor's Surname</label>\n          <input\n            type=\"text\"\n            id=\"doctorsSurname\"\n            name=\"doctorsSurname\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient.doctorsSurname\"\n            required\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls.doctorsSurname?.invalid &&\n              patientForm.controls.doctorsSurname?.touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <!-- Insurance input-->\n        <div class=\"form-group d-flex flex-column\">\n          <label for=\"insurance\" class=\"form-check-label\">Insurance</label>\n          <input\n            type=\"checkbox\"\n            id=\"insurance\"\n            name=\"insurance\"\n            class=\"form-check-input checkbox\"\n            [(ngModel)]=\"newPatient.insurance\"\n          />\n        </div>\n      </div>\n      <div class=\"d-flex gap-3 mt-3\">\n        <button (click)=\"close()\" type=\"button\" class=\"btn btn-danger\">\n          Close\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}