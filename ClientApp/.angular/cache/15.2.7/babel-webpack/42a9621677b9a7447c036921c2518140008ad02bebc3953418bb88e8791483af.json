{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet AuthGuard = class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // Simulate basic authentication logic\n    if (localStorage.getItem('userAuthenticated') === 'true') {\n      return true; // User is authenticated\n    } else {\n      // User is not authenticated; you can redirect to the login page\n      return this.router.parseUrl('/login');\n    }\n  }\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAOnC,IAAMC,SAAS,GAAf,MAAMA,SAAS;EACpBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;EAErCC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B;IACA,IAAIC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,KAAK,MAAM,EAAE;MACxD,OAAO,IAAI,CAAC,CAAC;KACd,MAAM;MACL;MACA,OAAO,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,QAAQ,CAAC;;EAEzC;CACD;AAfYR,SAAS,eAHrBD,UAAU,CAAC;EACVU,UAAU,EAAE;CACb,CAAC,GACWT,SAAS,CAerB;SAfYA,SAAS","names":["Injectable","AuthGuard","constructor","router","canActivate","route","state","localStorage","getItem","parseUrl","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\services\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | UrlTree {\n    // Simulate basic authentication logic\n    if (localStorage.getItem('userAuthenticated') === 'true') {\n      return true; // User is authenticated\n    } else {\n      // User is not authenticated; you can redirect to the login page\n      return this.router.parseUrl('/login');\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}