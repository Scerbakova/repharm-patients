{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction FormFieldComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nexport class FormFieldComponent {\n  constructor() {\n    this.isRequired = false;\n    this.onComponentReady = new EventEmitter();\n  }\n  ngOnInit() {\n    const control = this.isRequired ? new FormControl('', Validators.required) : new FormControl('');\n    this.controlFormGroup.addControl(this.controlName, control);\n    this.onComponentReady.emit(this.controlFormGroup);\n  }\n}\nFormFieldComponent.ɵfac = function FormFieldComponent_Factory(t) {\n  return new (t || FormFieldComponent)();\n};\nFormFieldComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormFieldComponent,\n  selectors: [[\"app-form-field\"]],\n  inputs: {\n    controlFormGroup: \"controlFormGroup\",\n    controlLabel: \"controlLabel\",\n    controlName: \"controlName\",\n    isRequired: \"isRequired\",\n    errorMessage: \"errorMessage\"\n  },\n  outputs: {\n    onComponentReady: \"onComponentReady\"\n  },\n  decls: 5,\n  vars: 7,\n  consts: [[3, \"formGroup\"], [3, \"for\"], [\"type\", \"text\", 1, \"form-control\", 3, \"id\", \"name\", \"formControlName\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function FormFieldComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 2);\n      i0.ɵɵtemplate(4, FormFieldComponent_div_4_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      let tmp_6_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.controlFormGroup);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"for\", ctx.controlName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.controlLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"id\", ctx.controlName)(\"name\", ctx.controlName)(\"formControlName\", ctx.controlName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (tmp_6_0 = ctx.controlFormGroup.get(ctx.controlName)) == null ? null : tmp_6_0.hasError(\"required\"));\n    }\n  },\n  dependencies: [i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAAA,SAAmCA,YAAY,QAAQ,eAAe;AACtE,SAAoBC,UAAU,EAAEC,WAAW,QAAQ,gBAAgB;;;;;;ICQjEC,8BAAyF;IACvFA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,oDACF;;;ADJF,OAAM,MAAOC,kBAAkB;EAJ/BC;IAWW,eAAU,GAAY,KAAK;IAG1B,qBAAgB,GAA4B,IAAIL,YAAY,EAAa;;EAEnFM,QAAQ;IACN,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,GAC3B,IAAIN,WAAW,CAAC,EAAE,EAAED,UAAU,CAACQ,QAAQ,CAAC,GACxC,IAAIP,WAAW,CAAC,EAAE,CAAC;IAEvB,IAAI,CAACQ,gBAAgB,CAACC,UAAU,CAAC,IAAI,CAACC,WAAW,EAAEL,OAAO,CAAC;IAC3D,IAAI,CAACM,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAACJ,gBAAgB,CAAC;EACnD;;AAnBWN,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAW;EAAAC;IAAAN;IAAAO;IAAAL;IAAAJ;IAAAU;EAAA;EAAAC;IAAAN;EAAA;EAAAO;EAAAC;EAAAC;EAAAC;IAAA;MCP/BpB,8BAAoC;MACHA,YAAkB;MAAAA,iBAAQ;MACzDA,2BAME;MACFA,mEAEM;MACRA,iBAAM;;;;MAZDA,gDAA8B;MAC1BA,eAAuB;MAAvBA,gDAAuB;MAACA,eAAkB;MAAlBA,sCAAkB;MAG/CA,eAAkB;MAAlBA,oCAAkB;MAKdA,eAA6D;MAA7DA,0HAA6D","names":["EventEmitter","Validators","FormControl","i0","FormFieldComponent","constructor","ngOnInit","control","isRequired","required","controlFormGroup","addControl","controlName","onComponentReady","emit","selectors","inputs","controlLabel","errorMessage","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\form-field\\form-field.component.ts","C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\form-field\\form-field.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-form-field',\n  templateUrl: './form-field.component.html',\n})\nexport class FormFieldComponent {\n  @Input()\n  controlFormGroup!: FormGroup;\n  @Input()\n  controlLabel!: string;\n  @Input()\n  controlName!: string;\n  @Input() isRequired: boolean = false;\n  @Input()\n  errorMessage?: string;\n  @Output() onComponentReady: EventEmitter<FormGroup> = new EventEmitter<FormGroup>();\n\n  ngOnInit() {\n    const control = this.isRequired\n      ? new FormControl('', Validators.required)\n      : new FormControl('');\n\n    this.controlFormGroup.addControl(this.controlName, control);\n    this.onComponentReady.emit(this.controlFormGroup);\n  }\n}","<div [formGroup]=\"controlFormGroup\">\n  <label for=\"{{ controlName }}\">{{ controlLabel }}</label>\n  <input\n    type=\"text\"\n    [id]=\"controlName\"\n    [name]=\"controlName\"\n    class=\"form-control\"\n    [formControlName]=\"controlName\"\n  />\n  <div *ngIf=\"controlFormGroup.get(controlName)?.hasError('required')\" class=\"text-danger\">\n    {{ errorMessage }}\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}