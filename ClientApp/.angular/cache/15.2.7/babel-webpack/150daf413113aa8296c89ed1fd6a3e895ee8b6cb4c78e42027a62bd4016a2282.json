{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/patients.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction RegistrationFormComponent_div_0_div_5_small_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 17);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"label\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_div_5_Template_input_ngModelChange_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const field_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.newPatient[field_r3] = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, RegistrationFormComponent_div_0_div_5_small_4_Template, 2, 0, \"small\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r3 = ctx.$implicit;\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(3);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"for\", field_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(field_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", field_r3)(\"name\", field_r3)(\"ngModel\", ctx_r2.newPatient[field_r3])(\"required\", !ctx_r2.canBeEmptyFields.includes(field_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.controls[field_r3].invalid && _r1.controls[field_r3].touched);\n  }\n}\nfunction RegistrationFormComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.close());\n    });\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.preventClose($event));\n    });\n    i0.ɵɵelementStart(2, \"form\", 3, 4);\n    i0.ɵɵlistener(\"ngSubmit\", function RegistrationFormComponent_div_0_Template_form_ngSubmit_2_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.registerPatient());\n    });\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵtemplate(5, RegistrationFormComponent_div_0_div_5_Template, 5, 7, \"div\", 6);\n    i0.ɵɵelementStart(6, \"div\", 7)(7, \"label\", 8);\n    i0.ɵɵtext(8, \"Insurance\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.newPatient.insurance = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"div\", 10)(11, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_button_click_11_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.close());\n    });\n    i0.ɵɵtext(12, \" Close \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 12);\n    i0.ɵɵtext(14, \"Register\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.patientFields);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.insurance);\n  }\n}\nexport class RegistrationFormComponent {\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n  }\n  constructor(patientsService, formBuilder) {\n    this.patientsService = patientsService;\n    this.formBuilder = formBuilder;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n    this.patientFields = ['first name', 'last name', 'personal id', 'date of birth', 'phone number', 'email', 'medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations', `doctor's name`, `doctor's surname`];\n    this.canBeEmptyFields = ['medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations'];\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    const patient = {\n      // Map the form values to a patient object\n      id: this.newPatient.id,\n      firstName: this.newPatient.firstName,\n      lastName: this.newPatient.lastName,\n      personalId: this.newPatient.personalId,\n      dateOfBirth: this.newPatient.dateOfBirth,\n      phoneNumber: this.newPatient.phoneNumber,\n      email: this.newPatient.email,\n      medicalConditions: this.newPatient.medicalConditions,\n      surgicalHistory: this.newPatient.surgicalHistory,\n      medications: this.newPatient.medications,\n      allergies: this.newPatient.allergies,\n      immunizations: this.newPatient.immunizations,\n      doctorsName: this.newPatient.doctorsName,\n      doctorsSurname: this.newPatient.doctorsSurname,\n      insurance: this.newPatient.insurance\n    };\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      this.patientsService.addNewPatient(patient).subscribe({\n        next: response => {\n          console.log('Patient registered successfully:', response);\n          this.close();\n        },\n        error: error => {\n          console.error('Error registering patient:', error);\n        }\n      });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\nRegistrationFormComponent.ɵfac = function RegistrationFormComponent_Factory(t) {\n  return new (t || RegistrationFormComponent)(i0.ɵɵdirectiveInject(i1.PatientsService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nRegistrationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationFormComponent,\n  selectors: [[\"app-registration-form\"]],\n  inputs: {\n    isModalOpen: \"isModalOpen\"\n  },\n  outputs: {\n    isModalOpenChange: \"isModalOpenChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"form__modal-overlay\", 3, \"click\", 4, \"ngIf\"], [1, \"form__modal-overlay\", 3, \"click\"], [1, \"form__modal\", 3, \"click\"], [3, \"ngSubmit\"], [\"patientForm\", \"ngForm\"], [1, \"fields\"], [\"class\", \"form-group\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-group\", \"d-flex\", \"flex-column\"], [\"for\", \"insurance\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"insurance\", \"name\", \"insurance\", 1, \"form-check-input\", \"checkbox\", 3, \"ngModel\", \"ngModelChange\"], [1, \"d-flex\", \"gap-3\", \"mt-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"form-group\"], [3, \"for\"], [\"type\", \"text\", 1, \"form-control\", 3, \"id\", \"name\", \"ngModel\", \"required\", \"ngModelChange\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function RegistrationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegistrationFormComponent_div_0_Template, 15, 2, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isModalOpen);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  styles: [\".form__modal-overlay[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.6); \\n  z-index: 1000;\\n}\\n\\n.form__modal[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  background-color: white;\\n  z-index: 1001;\\n  padding: 20px;\\n  border-radius: 10px;\\n}\\n\\n.fields[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  flex: 1;\\n  margin-right: 10px; \\n  min-width: 240px;\\n}\\n\\n.checkbox[_ngcontent-%COMP%] {\\n  height: 30px;\\n  width: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24tZm9ybS9yZWdpc3RyYXRpb24tZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esb0NBQUEsRUFBQSxtQ0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLGVBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLGdDQUFBO0VBQ0EsdUJBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxhQUFBO0VBQ0EsZUFBQTtBQUVGOztBQUNBO0VBQ0UsT0FBQTtFQUNBLGtCQUFBLEVBQUEsaUNBQUE7RUFDQSxnQkFBQTtBQUVGOztBQUNBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7QUFFRiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtX19tb2RhbC1vdmVybGF5IHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTsgLyogU2VtaS10cmFuc3BhcmVudCBibGFjayBvdmVybGF5ICovXG4gIHotaW5kZXg6IDEwMDA7XG59XG5cbi5mb3JtX19tb2RhbCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB6LWluZGV4OiAxMDAxO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xufVxuLmZpZWxkc3tcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xufVxuXG4uZm9ybS1ncm91cCB7XG4gIGZsZXg6IDE7XG4gIG1hcmdpbi1yaWdodDogMTBweDsgLyogQWRqdXN0IHRoZSBzcGFjaW5nIGFzIG5lZWRlZCAqL1xuICBtaW4td2lkdGg6IDI0MHB4O1xufVxuXG4uY2hlY2tib3gge1xuICBoZWlnaHQ6IDMwcHg7XG4gIHdpZHRoOiAzMHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","i0","RegistrationFormComponent","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","newPatient","id","firstName","lastName","personalId","dateOfBirth","phoneNumber","email","medicalConditions","surgicalHistory","medications","allergies","immunizations","doctorsName","doctorsSurname","insurance","constructor","patientsService","formBuilder","patientForm","group","required","registerPatient","patient","valid","addNewPatient","subscribe","next","response","console","log","error","alert","selectors","inputs","isModalOpen","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts","C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Patient } from 'src/app/models/patient.model';\nimport { PatientsService } from 'src/app/services/patients.service';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss'],\n})\nexport class RegistrationFormComponent {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  newPatient: { [key: string]: typeof keyof Patient } = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    personalId: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    email: '',\n    medicalConditions: [],\n    surgicalHistory: [],\n    medications: [],\n    allergies: [],\n    immunizations: [],\n    doctorsName: '',\n    doctorsSurname: '',\n    insurance: null,\n  };\n\n  patientFields: string[] = [\n    'first name',\n    'last name',\n    'personal id',\n    'date of birth',\n    'phone number',\n    'email',\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n    `doctor's name`,\n    `doctor's surname`,\n  ];\n\n  canBeEmptyFields: string[] = [\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n  ];\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null,\n    };\n  }\n  patientForm: FormGroup;\n  constructor(\n    private patientsService: PatientsService,\n    private formBuilder: FormBuilder\n  ) {\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    const patient: Patient = {\n      // Map the form values to a patient object\n      id: this.newPatient.id,\n      firstName: this.newPatient.firstName,\n      lastName: this.newPatient.lastName,\n      personalId: this.newPatient.personalId,\n      dateOfBirth: this.newPatient.dateOfBirth,\n      phoneNumber: this.newPatient.phoneNumber,\n      email: this.newPatient.email,\n      medicalConditions: this.newPatient.medicalConditions,\n      surgicalHistory: this.newPatient.surgicalHistory,\n      medications: this.newPatient.medications,\n      allergies: this.newPatient.allergies,\n      immunizations: this.newPatient.immunizations,\n      doctorsName: this.newPatient.doctorsName,\n      doctorsSurname: this.newPatient.doctorsSurname,\n      insurance: this.newPatient.insurance,\n    };\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      this.patientsService\n        .addNewPatient(patient)\n        .subscribe({\n          next: (response) => {\n            console.log('Patient registered successfully:', response);\n            this.close();\n          },\n          error: (error) => {\n            console.error('Error registering patient:', error);\n          },\n        });\n    } else {\n      // If the form is invalid, show an error message\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\n","<div (click)=\"close()\" class=\"form__modal-overlay\" *ngIf=\"isModalOpen\">\n  <div class=\"form__modal\" (click)=\"preventClose($event)\">\n    <form (ngSubmit)=\"registerPatient()\" #patientForm=\"ngForm\">\n      <div class=\"fields\">\n        <div *ngFor=\"let field of patientFields\" class=\"form-group\">\n          <label for=\"{{ field }}\">{{ field }}</label>\n          <input\n            type=\"text\"\n            [id]=\"field\"\n            [name]=\"field\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient[field]\"\n            [required]=\"!canBeEmptyFields.includes(field)\"\n          />\n          <small\n            *ngIf=\"\n              patientForm.controls[field].invalid &&\n              patientForm.controls[field].touched\n            \"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        <div class=\"form-group d-flex flex-column\">\n          <label for=\"insurance\" class=\"form-check-label\">Insurance</label>\n          <input\n            type=\"checkbox\"\n            id=\"insurance\"\n            name=\"insurance\"\n            class=\"form-check-input checkbox\"\n            [(ngModel)]=\"newPatient.insurance\"\n          />\n        </div>\n      </div>\n      <div class=\"d-flex gap-3 mt-3\">\n        <button (click)=\"close()\" type=\"button\" class=\"btn btn-danger\">\n          Close\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}