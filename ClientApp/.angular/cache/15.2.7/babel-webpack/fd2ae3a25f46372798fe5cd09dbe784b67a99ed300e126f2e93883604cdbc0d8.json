{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction RegistrationFormComponent_div_0_div_4_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_div_4_ng_container_3_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const field_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.newPatient[field_r3] = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const field_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", field_r3)(\"name\", field_r3)(\"ngModel\", ctx_r4.newPatient[field_r3]);\n  }\n}\nfunction RegistrationFormComponent_div_0_div_4_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_div_4_ng_template_4_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const field_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.newPatient[field_r3] = $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"id\", field_r3)(\"name\", field_r3)(\"ngModel\", ctx_r6.newPatient[field_r3]);\n  }\n}\nfunction RegistrationFormComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"label\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, RegistrationFormComponent_div_0_div_4_ng_container_3_Template, 2, 3, \"ng-container\", 11);\n    i0.ɵɵtemplate(4, RegistrationFormComponent_div_0_div_4_ng_template_4_Template, 1, 3, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r3 = ctx.$implicit;\n    const _r5 = i0.ɵɵreference(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"for\", field_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(field_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", field_r3 !== \"medicalConditions\")(\"ngIfElse\", _r5);\n  }\n}\nfunction RegistrationFormComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.close());\n    });\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.preventClose($event));\n    });\n    i0.ɵɵelementStart(2, \"form\", 3, 4);\n    i0.ɵɵlistener(\"ngSubmit\", function RegistrationFormComponent_div_0_Template_form_ngSubmit_2_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.registerPatient());\n    });\n    i0.ɵɵtemplate(4, RegistrationFormComponent_div_0_div_4_Template, 6, 4, \"div\", 5);\n    i0.ɵɵelementStart(5, \"div\", 6)(6, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.close());\n    });\n    i0.ɵɵtext(7, \"Close\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 8);\n    i0.ɵɵtext(9, \"Register\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.patientFields);\n  }\n}\nexport class RegistrationFormComponent {\n  constructor() {\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n    this.patientFields = ['firstName', 'lastName', 'personalId', 'dateOfBirth', 'phoneNumber', 'email', 'medicalConditions', 'surgicalHistory', 'medications', 'allergies', 'immunizations', 'doctorsName', 'doctorsSurname', 'insurance'];\n  }\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n  }\n  registerPatient() {\n    // Implement the registration logic here\n    // You can send the 'newPatient' object to your API or service\n    // to store the patient data in your backend.\n    console.log(this.newPatient); // Just for testing\n    this.close(); // Close the modal after registration\n  }\n}\n\nRegistrationFormComponent.ɵfac = function RegistrationFormComponent_Factory(t) {\n  return new (t || RegistrationFormComponent)();\n};\nRegistrationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationFormComponent,\n  selectors: [[\"app-registration-form\"]],\n  inputs: {\n    isModalOpen: \"isModalOpen\"\n  },\n  outputs: {\n    isModalOpenChange: \"isModalOpenChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"form__modal-overlay\", 3, \"click\", 4, \"ngIf\"], [1, \"form__modal-overlay\", 3, \"click\"], [1, \"form__modal\", 3, \"click\"], [3, \"ngSubmit\"], [\"patientForm\", \"ngForm\"], [\"class\", \"form-group\", 4, \"ngFor\", \"ngForOf\"], [1, \"d-flex\", \"gap-3\", \"mt-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"form-group\"], [3, \"for\"], [4, \"ngIf\", \"ngIfElse\"], [\"multipleValueInput\", \"\"], [\"type\", \"text\", \"required\", \"\", 1, \"form-control\", 3, \"id\", \"name\", \"ngModel\", \"ngModelChange\"]],\n  template: function RegistrationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegistrationFormComponent_div_0_Template, 10, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isModalOpen);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  styles: [\".form__modal-overlay[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.6); \\n  z-index: 1000;\\n}\\n\\n.form__modal[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  background-color: white;\\n  z-index: 1001;\\n  padding: 20px;\\n  border-radius: 10px;\\n}\\n\\n.form__modal[_ngcontent-%COMP%]   form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n  flex-direction: column;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  flex: 1;\\n  margin-right: 10px; \\n  min-width: 240px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24tZm9ybS9yZWdpc3RyYXRpb24tZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esb0NBQUEsRUFBQSxtQ0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLGVBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLGdDQUFBO0VBQ0EsdUJBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxhQUFBO0VBQ0EsZUFBQTtFQUNBLHNCQUFBO0FBRUY7O0FBQ0E7RUFDRSxPQUFBO0VBQ0Esa0JBQUEsRUFBQSxpQ0FBQTtFQUNBLGdCQUFBO0FBRUYiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybV9fbW9kYWwtb3ZlcmxheSB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNik7IC8qIFNlbWktdHJhbnNwYXJlbnQgYmxhY2sgb3ZlcmxheSAqL1xuICB6LWluZGV4OiAxMDAwO1xufVxuXG4uZm9ybV9fbW9kYWwge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgei1pbmRleDogMTAwMTtcbiAgcGFkZGluZzogMjBweDtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbn1cbi5mb3JtX19tb2RhbCBmb3JtIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4uZm9ybS1ncm91cCB7XG4gIGZsZXg6IDE7XG4gIG1hcmdpbi1yaWdodDogMTBweDsgLyogQWRqdXN0IHRoZSBzcGFjaW5nIGFzIG5lZWRlZCAqL1xuICBtaW4td2lkdGg6IDI0MHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","RegistrationFormComponent","constructor","id","firstName","lastName","personalId","dateOfBirth","phoneNumber","email","medicalConditions","surgicalHistory","medications","allergies","immunizations","doctorsName","doctorsSurname","insurance","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","newPatient","registerPatient","console","log","selectors","inputs","isModalOpen","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts","C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DynamicFields } from 'src/app/models/patient.model';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})\nexport class RegistrationFormComponent {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  newPatient: DynamicFields  = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    personalId: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    email: '',\n    medicalConditions: [],\n    surgicalHistory: [],\n    medications: [],\n    allergies: [],\n    immunizations: [],\n    doctorsName: '',\n    doctorsSurname: '',\n    insurance: null,\n  };\n\n  patientFields: string[] = [\n    'firstName',\n    'lastName',\n    'personalId',\n    'dateOfBirth',\n    'phoneNumber',\n    'email',\n    'medicalConditions',\n    'surgicalHistory',\n    'medications',\n    'allergies',\n    'immunizations',\n    'doctorsName',\n    'doctorsSurname',\n    'insurance',\n  ];\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null,\n    };\n  }\n\n  registerPatient() {\n    // Implement the registration logic here\n    // You can send the 'newPatient' object to your API or service\n    // to store the patient data in your backend.\n    console.log(this.newPatient); // Just for testing\n    this.close(); // Close the modal after registration\n  }\n}","<div (click)=\"close()\" class=\"form__modal-overlay\" *ngIf=\"isModalOpen\">\n  <div class=\"form__modal\" (click)=\"preventClose($event)\">\n    <form (ngSubmit)=\"registerPatient()\" #patientForm=\"ngForm\">\n      <div *ngFor=\"let field of patientFields\" class=\"form-group\">\n        <label for=\"{{ field }}\">{{ field }}</label>\n        <ng-container *ngIf=\"field !== 'medicalConditions'; else multipleValueInput\">\n          <input\n            type=\"text\"\n            [id]=\"field\"\n            [name]=\"field\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient[field]\"\n            required\n          />\n        </ng-container>\n        <ng-template #multipleValueInput>\n          <input\n            type=\"text\"\n            [id]=\"field\"\n            [name]=\"field\"\n            class=\"form-control\"\n            [(ngModel)]=\"newPatient[field]\"\n            required\n          />\n          <!-- Add logic to handle multiple values here -->\n        </ng-template>\n      </div>\n      <div class=\"d-flex gap-3 mt-3\">\n        <button (click)=\"close()\" type=\"button\" class=\"btn btn-danger\">Close</button>\n        <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n      </div>\n    </form>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}