{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction RegistrationFormComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"form\", 3, 4);\n    i0.ɵɵlistener(\"ngSubmit\", function RegistrationFormComponent_div_0_Template_form_ngSubmit_2_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.registerPatient());\n    });\n    i0.ɵɵelementStart(4, \"div\", 5)(5, \"label\", 6);\n    i0.ɵɵtext(6, \"First Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"input\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.newPatient.firstName = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 5)(9, \"label\", 8);\n    i0.ɵɵtext(10, \"Last Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistrationFormComponent_div_0_Template_input_ngModelChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.newPatient.lastName = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 10)(13, \"button\", 11);\n    i0.ɵɵtext(14, \"Close\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 12);\n    i0.ɵɵtext(16, \"Register\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.firstName);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.newPatient.lastName);\n  }\n}\nexport class RegistrationFormComponent {\n  constructor() {\n    this.isModalOpen = false;\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: false\n    };\n  }\n  registerPatient() {\n    // Implement the registration logic here\n    // You can send the 'newPatient' object to your API or service\n    // to store the patient data in your backend.\n    console.log(this.newPatient); // Just for testing\n  }\n\n  close() {\n    this.isModalOpen = false;\n  }\n}\nRegistrationFormComponent.ɵfac = function RegistrationFormComponent_Factory(t) {\n  return new (t || RegistrationFormComponent)();\n};\nRegistrationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationFormComponent,\n  selectors: [[\"app-registration-form\"]],\n  inputs: {\n    isModalOpen: \"isModalOpen\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"modal-overlay\", 4, \"ngIf\"], [1, \"modal-overlay\"], [1, \"modal\"], [3, \"ngSubmit\"], [\"patientForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"firstName\"], [\"type\", \"text\", \"id\", \"firstName\", \"name\", \"firstName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"lastName\"], [\"type\", \"text\", \"id\", \"lastName\", \"name\", \"lastName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"d-flex\", \"gap-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function RegistrationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegistrationFormComponent_div_0_Template, 17, 2, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isModalOpen);\n    }\n  },\n  dependencies: [i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"mappings":";;;;;;IAAAA,8BAA+C;IAErCA;MAAAA;MAAA;MAAA,OAAYA,uCAAiB;IAAA,EAAC;IAClCA,8BAAwB;IACCA,0BAAU;IAAAA,iBAAQ;IACzCA,gCAOE;IAFAA;MAAAA;MAAA;MAAA,OAAaA,oDACjB;IAAA,EADsC;IALpCA,iBAOE;IAEJA,8BAAwB;IACAA,0BAAS;IAAAA,iBAAQ;IACvCA,iCAOE;IAFAA;MAAAA;MAAA;MAAA,OAAaA,mDACjB;IAAA,EADqC;IALnCA,iBAOE;IAGJA,gCAA0B;IACqBA,sBAAK;IAAAA,iBAAS;IAC3DA,mCAA8C;IAAAA,yBAAQ;IAAAA,iBAAS;;;;IAlB7DA,eAAkC;IAAlCA,qDAAkC;IAWlCA,eAAiC;IAAjCA,oDAAiC;;;ACb3C,OAAM,MAAOC,yBAAyB;EALtCC;IAMW,gBAAW,GAAY,KAAK;IAErC,eAAU,GAAY;MACpBC,EAAE,EAAE,EAAE;MACNC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE;MACTC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE,EAAE;MACnBC,WAAW,EAAE,EAAE;MACfC,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MACfC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE;KACZ;;EAEDC,eAAe;IACb;IACA;IACA;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC;EAChC;;EACAC,KAAK;IACH,IAAI,CAACC,WAAW,GAAG,KAAK;EAC1B;;AA7BWtB,yBAAyB;mBAAzBA,yBAAyB;AAAA;AAAzBA,yBAAyB;QAAzBA,yBAAyB;EAAAuB;EAAAC;IAAAF;EAAA;EAAAG;EAAAC;EAAAC;EAAAC;IAAA;MDRtC7B,2EAgCM;;;MAhCsBA,sCAAiB","names":["i0","RegistrationFormComponent","constructor","id","firstName","lastName","personalId","dateOfBirth","phoneNumber","email","medicalConditions","surgicalHistory","medications","allergies","immunizations","doctorsName","doctorsSurname","insurance","registerPatient","console","log","newPatient","close","isModalOpen","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.html","C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts"],"sourcesContent":["<div class=\"modal-overlay\" *ngIf=\"isModalOpen\">\n  <div class=\"modal\">\n    <form (ngSubmit)=\"registerPatient()\" #patientForm=\"ngForm\">\n      <div class=\"form-group\">\n        <label for=\"firstName\">First Name</label>\n        <input\n          type=\"text\"\n          id=\"firstName\"\n          name=\"firstName\"\n          class=\"form-control\"\n          [(ngModel)]=\"newPatient.firstName\"\n          required\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"lastName\">Last Name</label>\n        <input\n          type=\"text\"\n          id=\"lastName\"\n          name=\"lastName\"\n          class=\"form-control\"\n          [(ngModel)]=\"newPatient.lastName\"\n          required\n        />\n      </div>\n      <!-- Add other input fields for the remaining patient properties -->\n      <div class=\"d-flex gap-3\">\n        <button type=\"button\" class=\"btn btn-danger\">Close</button>\n        <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Patient } from 'src/app/models/patient.model';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.css']\n})\nexport class RegistrationFormComponent {\n  @Input() isModalOpen: boolean = false;\n\n  newPatient: Patient = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    personalId: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    email: '',\n    medicalConditions: [],\n    surgicalHistory: [],\n    medications: [],\n    allergies: [],\n    immunizations: [],\n    doctorsName: '',\n    doctorsSurname: '',\n    insurance: false,\n  };\n\n  registerPatient() {\n    // Implement the registration logic here\n    // You can send the 'newPatient' object to your API or service\n    // to store the patient data in your backend.\n    console.log(this.newPatient); // Just for testing\n  }\n  close() {\n    this.isModalOpen = false;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}