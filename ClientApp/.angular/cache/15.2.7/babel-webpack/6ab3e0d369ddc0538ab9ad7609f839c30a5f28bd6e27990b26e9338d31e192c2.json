{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistrationFormComponent = class RegistrationFormComponent {\n  buidForm() {\n    this.registerPatientForm = this.fb.group({\n      'first name': ['', Validators.required],\n      'last name': ['', Validators.required],\n      'personal id': ['', Validators.required],\n      'date of birth': ['', Validators.required],\n      'phone number': ['', Validators.required],\n      email: ['', Validators.required],\n      'medical conditions': [''],\n      'surgical history': [''],\n      medications: [''],\n      allergies: [''],\n      immunizations: [''],\n      \"doctor's name\": ['', Validators.required],\n      \"doctor's surname\": ['', Validators.required],\n      insurance: [false]\n    });\n  }\n  ngOnInit() {\n    this.buidForm();\n  }\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.registerPatientForm.reset();\n  }\n  constructor(patientsService, fb) {\n    this.patientsService = patientsService;\n    this.fb = fb;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.registerPatientForm = this.fb.group({});\n    this.patientFields = ['first name', 'last name', 'personal id', 'phone number', 'email', 'medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations', `doctor's name`, `doctor's surname`];\n  }\n  registerPatient() {\n    const patient = {\n      firstName: this.registerPatientForm.get('first name')?.value,\n      lastName: this.registerPatientForm.get('last name')?.value,\n      personalId: this.registerPatientForm.get('personal id')?.value,\n      dateOfBirth: this.registerPatientForm.get('date of birth')?.value,\n      phoneNumber: this.registerPatientForm.get('phone number')?.value,\n      email: this.registerPatientForm.get('email')?.value,\n      medicalConditions: this.registerPatientForm.get('medical conditions')?.value,\n      surgicalHistory: this.registerPatientForm.get('surgical history')?.value,\n      medications: this.registerPatientForm.get('medications')?.value,\n      allergies: this.registerPatientForm.get('allergies')?.value,\n      immunizations: this.registerPatientForm.get('immunizations')?.value,\n      doctorsName: this.registerPatientForm.get(`doctor's name`)?.value,\n      doctorsSurname: this.registerPatientForm.get(`doctor's surname`)?.value,\n      insurance: this.registerPatientForm.get('insurance')?.value\n    };\n    if (this.registerPatientForm.valid) {\n      this.patientsService.addNewPatient(patient).subscribe({\n        next: () => {\n          this.close();\n          this.resetForm();\n        },\n        error: error => {\n          console.error('Error registering patient:', error);\n        }\n      });\n    } else {\n      alert('Please fill in all the required fields.');\n    }\n  }\n};\n__decorate([Input()], RegistrationFormComponent.prototype, \"isModalOpen\", void 0);\n__decorate([Output()], RegistrationFormComponent.prototype, \"isModalOpenChange\", void 0);\nRegistrationFormComponent = __decorate([Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})], RegistrationFormComponent);\nexport { RegistrationFormComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","Validators","RegistrationFormComponent","buidForm","registerPatientForm","fb","group","required","email","medications","allergies","immunizations","insurance","ngOnInit","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","reset","constructor","patientsService","registerPatient","patient","firstName","get","value","lastName","personalId","dateOfBirth","phoneNumber","medicalConditions","surgicalHistory","doctorsName","doctorsSurname","valid","addNewPatient","subscribe","next","error","console","alert","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Patient } from 'src/app/models/patient.model';\nimport { PatientsService } from 'src/app/services/patients.service';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss'],\n})\nexport class RegistrationFormComponent implements OnInit {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  registerPatientForm: FormGroup = this.fb.group({});\n\n  buidForm(): void {\n    this.registerPatientForm = this.fb.group({\n      'first name': ['', Validators.required],\n      'last name': ['', Validators.required],\n      'personal id': ['', Validators.required],\n      'date of birth': ['', Validators.required],\n      'phone number': ['', Validators.required],\n      email: ['', Validators.required],\n      'medical conditions': [''],\n      'surgical history': [''],\n      medications: [''],\n      allergies: [''],\n      immunizations: [''],\n      \"doctor's name\": ['', Validators.required],\n      \"doctor's surname\": ['', Validators.required],\n      insurance: [false],\n    });\n  }\n\n  ngOnInit(): void {\n    this.buidForm();\n  }\n\n  patientFields: string[] = [\n    'first name',\n    'last name',\n    'personal id',\n    'phone number',\n    'email',\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n    `doctor's name`,\n    `doctor's surname`,\n  ];\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.registerPatientForm.reset();\n  }\n\n  constructor(\n    private patientsService: PatientsService,\n    private fb: FormBuilder\n  ) {}\n\n  registerPatient() {\n    const patient: Partial<Patient> = {\n      firstName: this.registerPatientForm.get('first name')?.value,\n      lastName: this.registerPatientForm.get('last name')?.value,\n      personalId: this.registerPatientForm.get('personal id')?.value,\n      dateOfBirth: this.registerPatientForm.get('date of birth')?.value,\n      phoneNumber: this.registerPatientForm.get('phone number')?.value,\n      email: this.registerPatientForm.get('email')?.value,\n      medicalConditions:\n        this.registerPatientForm.get('medical conditions')?.value,\n      surgicalHistory: this.registerPatientForm.get('surgical history')?.value,\n      medications: this.registerPatientForm.get('medications')?.value,\n      allergies: this.registerPatientForm.get('allergies')?.value,\n      immunizations: this.registerPatientForm.get('immunizations')?.value,\n      doctorsName: this.registerPatientForm.get(`doctor's name`)?.value,\n      doctorsSurname: this.registerPatientForm.get(`doctor's surname`)?.value,\n      insurance: this.registerPatientForm.get('insurance')?.value,\n    };\n    if (this.registerPatientForm.valid) {\n      this.patientsService.addNewPatient(patient).subscribe({\n        next: () => {\n          this.close();\n          this.resetForm();\n        },\n        error: (error) => {\n          console.error('Error registering patient:', error);\n        },\n      });\n    } else {\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}