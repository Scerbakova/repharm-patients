{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nlet RegistrationFormComponent = class RegistrationFormComponent {\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n  }\n  constructor(patientsService, formBuilder) {\n    this.patientsService = patientsService;\n    this.formBuilder = formBuilder;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null\n    };\n    this.patientFields = ['first name', 'last name', 'personal id', 'date of birth', 'phone number', 'email', 'medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations', `doctor's name`, `doctor's surname`, 'insurance'];\n    this.canBeEmptyFields = ['medical conditions', 'surgical history', 'medications', 'allergies', 'immunizations'];\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      this.patientsService.addNewPatient(this.newPatient).subscribe(response => {\n        console.log('Patient registered successfully:', response);\n        this.close();\n      }, error => {\n        console.error('Error registering patient:', error);\n      });\n    }\n  }\n};\n__decorate([Input()], RegistrationFormComponent.prototype, \"isModalOpen\", void 0);\n__decorate([Output()], RegistrationFormComponent.prototype, \"isModalOpenChange\", void 0);\nRegistrationFormComponent = __decorate([Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})], RegistrationFormComponent);\nexport { RegistrationFormComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","RegistrationFormComponent","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","newPatient","id","firstName","lastName","personalId","dateOfBirth","phoneNumber","email","medicalConditions","surgicalHistory","medications","allergies","immunizations","doctorsName","doctorsSurname","insurance","constructor","patientsService","formBuilder","patientForm","group","Validators","required","registerPatient","valid","addNewPatient","subscribe","response","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DynamicFields } from 'src/app/models/patient.model';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})\nexport class RegistrationFormComponent {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  newPatient: DynamicFields  = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    personalId: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    email: '',\n    medicalConditions: [],\n    surgicalHistory: [],\n    medications: [],\n    allergies: [],\n    immunizations: [],\n    doctorsName: '',\n    doctorsSurname: '',\n    insurance: null,\n  };\n\n  patientFields: string[] = [\n    'first name',\n    'last name',\n    'personal id',\n    'date of birth',\n    'phone number',\n    'email',\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n    `doctor's name`,\n    `doctor's surname`,\n    'insurance',\n  ];\n\n  canBeEmptyFields: string[] = [\n    'medical conditions',\n    'surgical history',\n    'medications',\n    'allergies',\n    'immunizations',\n  ];\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.newPatient = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      personalId: '',\n      dateOfBirth: '',\n      phoneNumber: '',\n      email: '',\n      medicalConditions: [],\n      surgicalHistory: [],\n      medications: [],\n      allergies: [],\n      immunizations: [],\n      doctorsName: '',\n      doctorsSurname: '',\n      insurance: null,\n    };\n  }\n  patientForm: FormGroup;\n  constructor(private patientsService: PatientsService, private formBuilder: FormBuilder) {\n    // Initialize the patientForm with validation rules\n    this.patientForm = this.formBuilder.group({\n      // Define form controls and add validation rules\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      // Add more fields with validators as needed\n    });\n  }\n\n  registerPatient() {\n    if (this.patientForm.valid) {\n      // If the form is valid, submit the data\n      this.patientsService.addNewPatient(this.newPatient).subscribe(\n        (response) => {\n          console.log('Patient registered successfully:', response);\n          this.close();\n        },\n        (error) => {\n          console.error('Error registering patient:', error);\n        }\n      );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}