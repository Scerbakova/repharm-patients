{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/patients.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction RegistrationFormComponent_div_0_div_4_small_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \" This field is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationFormComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"label\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 14);\n    i0.ɵɵtemplate(4, RegistrationFormComponent_div_0_div_4_small_4_Template, 2, 0, \"small\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    let tmp_4_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", field_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(field_r2[field_r2.key]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", field_r2.key)(\"formControlName\", field_r2.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx_r1.registerPatientForm.get(field_r2.key)) == null ? null : tmp_4_0.hasError(\"required\")) && ((tmp_4_0 = ctx_r1.registerPatientForm.get(field_r2.key)) == null ? null : tmp_4_0.touched));\n  }\n}\nfunction RegistrationFormComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.close());\n    });\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.preventClose($event));\n    });\n    i0.ɵɵelementStart(2, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function RegistrationFormComponent_div_0_Template_form_ngSubmit_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.registerPatient());\n    });\n    i0.ɵɵelementStart(3, \"div\", 4);\n    i0.ɵɵtemplate(4, RegistrationFormComponent_div_0_div_4_Template, 5, 5, \"div\", 5);\n    i0.ɵɵelementStart(5, \"div\", 6)(6, \"label\", 7);\n    i0.ɵɵtext(7, \"Insurance\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 9)(10, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function RegistrationFormComponent_div_0_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.close());\n    });\n    i0.ɵɵtext(11, \" Close \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 11);\n    i0.ɵɵtext(13, \"Register\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.registerPatientForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.patientFields);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formControlName\", \"insurance\");\n  }\n}\nexport class RegistrationFormComponent {\n  buidForm() {\n    this.registerPatientForm = this.fb.group({\n      'first name': ['', Validators.required],\n      'last name': ['', Validators.required],\n      'personal id': ['', Validators.required],\n      'date of birth': ['', Validators.required],\n      'phone number': ['', Validators.required],\n      email: ['', Validators.required],\n      'medical conditions': [''],\n      'surgical history': [''],\n      medications: [''],\n      allergies: [''],\n      immunizations: [''],\n      \"doctor's name\": ['', Validators.required],\n      \"doctor's surname\": ['', Validators.required],\n      insurance: [false]\n    });\n  }\n  ngOnInit() {\n    this.buidForm();\n  }\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n  preventClose(event) {\n    event.stopPropagation();\n  }\n  resetForm() {\n    this.registerPatientForm.reset();\n  }\n  constructor(patientsService, fb) {\n    this.patientsService = patientsService;\n    this.fb = fb;\n    this.isModalOpen = false;\n    this.isModalOpenChange = new EventEmitter();\n    this.registerPatientForm = this.fb.group({});\n    this.patientFields = [{\n      'firstName': 'First Name'\n    }, {\n      'lastName': 'Last Name'\n    }, {\n      'personalId': 'Personal ID'\n    }, {\n      'dateOfBirth': 'Date of Birth'\n    }, {\n      'phoneNumber': 'Phone Number'\n    }, {\n      'email': 'Email'\n    }, {\n      'medicalConditions': 'Medical Conditions'\n    }, {\n      'surgicalHistory': 'Surgical History'\n    }, {\n      'medications': 'Medications'\n    }, {\n      'allergies': 'Allergies'\n    }, {\n      'immunizations': 'Immunizations'\n    }, {\n      'doctorsName': \"Doctor's Name\"\n    }, {\n      'doctorsSurname': \"Doctor's Surname\"\n    }];\n  }\n  // registerPatient() {\n  //   const patient = {\n  //     firstName: this.registerPatientForm.get('first name')?.value,\n  //     lastName: this.registerPatientForm.get('last name')?.value,\n  //     personalId: this.registerPatientForm.get('personal id')?.value,\n  //     dateOfBirth: this.registerPatientForm.get('date of birth')?.value,\n  //     phoneNumber: this.registerPatientForm.get('phone number')?.value,\n  //     email: this.registerPatientForm.get('email')?.value,\n  //     medicalConditions: this.registerPatientForm.get('medical conditions')?.value,\n  //     surgicalHistory: this.registerPatientForm.get('surgical history')?.value,\n  //     medications: this.registerPatientForm.get('medications')?.value,\n  //     allergies: this.registerPatientForm.get('allergies')?.value,\n  //     immunizations: this.registerPatientForm.get('immunizations')?.value,\n  //     doctorsName: this.registerPatientForm.get(`doctor's name`)?.value,\n  //     doctorsSurname: this.registerPatientForm.get(`doctor's surname`)?.value,\n  //     insurance: this.registerPatientForm.get('insurance')?.value,\n  //   };\n  //   if (this.registerPatientForm.valid) {\n  //     this.patientsService.addNewPatient(patient).subscribe({\n  //       next: () => {\n  //         this.close();\n  //       },\n  //       error: (error) => {\n  //         console.error('Error registering patient:', error);\n  //       },\n  //     });\n  //   } else {\n  //     alert('Please fill in all the required fields.');\n  //   }\n  // }\n  registerPatient() {\n    if (this.registerPatientForm.valid) {\n      const patient = this.registerPatientForm.value;\n      this.patientsService.addNewPatient(patient).subscribe({\n        next: () => {\n          this.close();\n          this.resetForm();\n        },\n        error: error => console.error('Error registering patient:', error)\n      });\n    } else {\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\nRegistrationFormComponent.ɵfac = function RegistrationFormComponent_Factory(t) {\n  return new (t || RegistrationFormComponent)(i0.ɵɵdirectiveInject(i1.PatientsService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nRegistrationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationFormComponent,\n  selectors: [[\"app-registration-form\"]],\n  inputs: {\n    isModalOpen: \"isModalOpen\"\n  },\n  outputs: {\n    isModalOpenChange: \"isModalOpenChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"form__modal-overlay\", 3, \"click\", 4, \"ngIf\"], [1, \"form__modal-overlay\", 3, \"click\"], [1, \"form__modal\", 3, \"click\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"fields\"], [\"class\", \"form-group\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-group\", \"d-flex\", \"flex-column\"], [\"for\", \"insurance\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"insurance\", 1, \"form-check-input\", \"checkbox\", 3, \"formControlName\"], [1, \"d-flex\", \"gap-3\", \"mt-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"form-group\"], [3, \"for\"], [\"type\", \"text\", 1, \"form-control\", 3, \"id\", \"formControlName\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function RegistrationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegistrationFormComponent_div_0_Template, 14, 3, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isModalOpen);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\".form__modal-overlay[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.6); \\n  z-index: 1000;\\n}\\n\\n.form__modal[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  background-color: white;\\n  z-index: 1001;\\n  padding: 20px;\\n  border-radius: 10px;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  flex: 1;\\n  margin-right: 10px; \\n  min-width: 240px;\\n}\\n\\n.fields[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.checkbox[_ngcontent-%COMP%] {\\n  height: 30px;\\n  width: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24tZm9ybS9yZWdpc3RyYXRpb24tZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esb0NBQUEsRUFBQSxtQ0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLGVBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLGdDQUFBO0VBQ0EsdUJBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxPQUFBO0VBQ0Esa0JBQUEsRUFBQSxpQ0FBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsZUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtX19tb2RhbC1vdmVybGF5IHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTsgLyogU2VtaS10cmFuc3BhcmVudCBibGFjayBvdmVybGF5ICovXG4gIHotaW5kZXg6IDEwMDA7XG59XG5cbi5mb3JtX19tb2RhbCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB6LWluZGV4OiAxMDAxO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xufVxuXG4uZm9ybS1ncm91cCB7XG4gIGZsZXg6IDE7XG4gIG1hcmdpbi1yaWdodDogMTBweDsgLyogQWRqdXN0IHRoZSBzcGFjaW5nIGFzIG5lZWRlZCAqL1xuICBtaW4td2lkdGg6IDI0MHB4O1xufVxuXG4uZmllbGRze1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG59XG5cbi5jaGVja2JveCB7XG4gIGhlaWdodDogMzBweDtcbiAgd2lkdGg6IDMwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","i0","RegistrationFormComponent","buidForm","registerPatientForm","fb","group","required","email","medications","allergies","immunizations","insurance","ngOnInit","openModal","resetForm","isModalOpenChange","emit","close","preventClose","event","stopPropagation","reset","constructor","patientsService","registerPatient","valid","patient","value","addNewPatient","subscribe","next","error","console","alert","selectors","inputs","isModalOpen","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.ts","C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\components\\registration-form\\registration-form.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Patient } from 'src/app/models/patient.model';\nimport { PatientsService } from 'src/app/services/patients.service';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss'],\n})\nexport class RegistrationFormComponent implements OnInit {\n  @Input() isModalOpen: boolean = false;\n  @Output() isModalOpenChange = new EventEmitter<boolean>();\n\n  registerPatientForm: FormGroup = this.fb.group({});\n\n  buidForm(): void {\n    this.registerPatientForm = this.fb.group({\n      'first name': ['', Validators.required],\n      'last name': ['', Validators.required],\n      'personal id': ['', Validators.required],\n      'date of birth': ['', Validators.required],\n      'phone number': ['', Validators.required],\n      email: ['', Validators.required],\n      'medical conditions': [''],\n      'surgical history': [''],\n      medications: [''],\n      allergies: [''],\n      immunizations: [''],\n      \"doctor's name\": ['', Validators.required],\n      \"doctor's surname\": ['', Validators.required],\n      insurance: [false],\n    });\n  }\n\n  ngOnInit(): void {\n    this.buidForm();\n  }\n\n patientFields: { [key: string]: string }[] = [\n    { 'firstName': 'First Name' },\n    { 'lastName': 'Last Name' },\n    { 'personalId': 'Personal ID' },\n    { 'dateOfBirth': 'Date of Birth' },\n    { 'phoneNumber': 'Phone Number' },\n    { 'email': 'Email' },\n    { 'medicalConditions': 'Medical Conditions' },\n    { 'surgicalHistory': 'Surgical History' },\n    { 'medications': 'Medications' },\n    { 'allergies': 'Allergies' },\n    { 'immunizations': 'Immunizations' },\n    { 'doctorsName': \"Doctor's Name\" },\n    { 'doctorsSurname': \"Doctor's Surname\" }\n  ];\n\n  openModal() {\n    this.resetForm();\n    this.isModalOpenChange.emit(true);\n  }\n\n  close() {\n    this.resetForm();\n    this.isModalOpenChange.emit(false);\n  }\n\n  preventClose(event: Event) {\n    event.stopPropagation();\n  }\n\n  private resetForm() {\n    this.registerPatientForm.reset();\n  }\n\n  constructor(\n    private patientsService: PatientsService,\n    private fb: FormBuilder\n  ) {}\n\n  // registerPatient() {\n  //   const patient = {\n  //     firstName: this.registerPatientForm.get('first name')?.value,\n  //     lastName: this.registerPatientForm.get('last name')?.value,\n  //     personalId: this.registerPatientForm.get('personal id')?.value,\n  //     dateOfBirth: this.registerPatientForm.get('date of birth')?.value,\n  //     phoneNumber: this.registerPatientForm.get('phone number')?.value,\n  //     email: this.registerPatientForm.get('email')?.value,\n  //     medicalConditions: this.registerPatientForm.get('medical conditions')?.value,\n  //     surgicalHistory: this.registerPatientForm.get('surgical history')?.value,\n  //     medications: this.registerPatientForm.get('medications')?.value,\n  //     allergies: this.registerPatientForm.get('allergies')?.value,\n  //     immunizations: this.registerPatientForm.get('immunizations')?.value,\n  //     doctorsName: this.registerPatientForm.get(`doctor's name`)?.value,\n  //     doctorsSurname: this.registerPatientForm.get(`doctor's surname`)?.value,\n  //     insurance: this.registerPatientForm.get('insurance')?.value,\n  //   };\n  //   if (this.registerPatientForm.valid) {\n  //     this.patientsService.addNewPatient(patient).subscribe({\n  //       next: () => {\n  //         this.close();\n  //       },\n  //       error: (error) => {\n  //         console.error('Error registering patient:', error);\n  //       },\n  //     });\n  //   } else {\n  //     alert('Please fill in all the required fields.');\n  //   }\n  // }\n  registerPatient() {\n    if (this.registerPatientForm.valid) {\n      const patient = this.registerPatientForm.value;\n      this.patientsService.addNewPatient(patient).subscribe({\n        next: () => {\n          this.close();\n          this.resetForm();\n        },\n        error: (error) => console.error('Error registering patient:', error),\n      });\n    } else {\n      alert('Please fill in all the required fields.');\n    }\n  }\n}\n","<div (click)=\"close()\" class=\"form__modal-overlay\" *ngIf=\"isModalOpen\">\n  <div class=\"form__modal\" (click)=\"preventClose($event)\">\n    <form [formGroup]=\"registerPatientForm\" (ngSubmit)=\"registerPatient()\">\n      <div class=\"fields\">\n        <div *ngFor=\"let field of patientFields\" class=\"form-group\">\n          <label [for]=\"field\">{{ field[field.key] }}</label>\n          <input\n            type=\"text\"\n            [id]=\"field.key\"\n            [formControlName]=\"field.key\"\n            class=\"form-control\"\n          />\n          <small\n            *ngIf=\"registerPatientForm.get(field.key)?.hasError('required') && registerPatientForm.get(field.key)?.touched\"\n            class=\"text-danger\"\n          >\n            This field is required.\n          </small>\n        </div>\n        \n        <!-- Insurance input-->\n        <div class=\"form-group d-flex flex-column\">\n          <label for=\"insurance\" class=\"form-check-label\">Insurance</label>\n          <input\n            type=\"checkbox\"\n            id=\"insurance\"\n            [formControlName]=\"'insurance'\"\n            class=\"form-check-input checkbox\"\n          />\n        </div>\n      </div>\n      <div class=\"d-flex gap-3 mt-3\">\n        <button (click)=\"close()\" type=\"button\" class=\"btn btn-danger\">\n          Close\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}