{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // Simulate basic authentication logic\n    if (localStorage.getItem('userAuthenticated') === 'true') {\n      return true; // User is authenticated\n    } else {\n      // User is not authenticated; you can redirect to the login page\n      return this.router.parseUrl('/login');\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;EAErCC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B;IACA,IAAIC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,KAAK,MAAM,EAAE;MACxD,OAAO,IAAI,CAAC,CAAC;KACd,MAAM;MACL;MACA,OAAO,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,QAAQ,CAAC;;EAEzC;;AAdWR,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAS,SAATT,SAAS;EAAAU,YAFR;AAAM","names":["AuthGuard","constructor","router","canActivate","route","state","localStorage","getItem","parseUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\repharm-patients\\ClientApp\\src\\app\\services\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | UrlTree {\n    // Simulate basic authentication logic\n    if (localStorage.getItem('userAuthenticated') === 'true') {\n      return true; // User is authenticated\n    } else {\n      // User is not authenticated; you can redirect to the login page\n      return this.router.parseUrl('/login');\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}